import os.path
import time
from typing import Union
from pathlib import Path
from watchdog.observers import Observer
from watchdog.events import EVENT_TYPE_CREATED, EVENT_TYPE_MODIFIED
from watchdog.events import FileSystemEventHandler, FileSystemEvent
from services.file_prison import FilePrison
from services.malware_scanner import MalwareScanner
from services.logger import Logger, VoidLogger


class MalwareWatcher:
    """
    Watches directory for malware and quarantines malware
    """
    def __init__(self, malware_scanner: MalwareScanner, file_prison: FilePrison, *, logger: Logger = VoidLogger()):
        self.observer = Observer()
        self.file_prison = file_prison
        self.malware_scanner = malware_scanner
        self.logger = logger

    def watch(self, directory: Union[Path, str]):
        event_handler = MalwareFileEventHandler(self)
        self.observer.schedule(event_handler, directory, recursive=True)
        self.observer.start()
        try:
            while True:
                time.sleep(3600)
        except Exception as e:
            self.observer.stop()
            print(e)

        self.observer.join()


class MalwareFileEventHandler(FileSystemEventHandler):
    def __init__(self, malware_watcher: MalwareWatcher):
        self.malware_watcher = malware_watcher

    def on_any_event(self, event: FileSystemEvent) -> None:
        if event.event_type == EVENT_TYPE_CREATED or \
                event.event_type == EVENT_TYPE_MODIFIED:
            filename = event.src_path
            if self.malware_watcher.malware_scanner.scan_file(filename):
                self.malware_watcher.file_prison.quarantine(filename)
                self.malware_watcher.logger.log(f'{event.src_path} has been quarantined')


