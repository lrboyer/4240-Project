import os
import sys
from static import config, action
from cryptography.fernet import Fernet
import dotenv
from pprint import pprint
from services import (
    Stopwatch,
    DatabaseReader,
    MalwareScanner,
    TypedArgumentParser,
    Logger,
    VoidLogger,
    FilePrison,
    MalwareWatcher,
    MalwareAnalyzer
)


def main():
    dotenv.load_dotenv()
    args = TypedArgumentParser().parse_args()

    if args.action == action.SCAN:
        stopwatch = Stopwatch()
        logger = Logger() if args.verbose else VoidLogger()

        database = DatabaseReader.read_database(config.MALWARE_DB_FILE)
        malware_scanner = MalwareScanner(database, logger=logger)

        print("Malware Scanner 4240 Class Project")
        print("Made by Lucas Boyer, Jeremy Sarasua and Ivan Lin")
        print("\n----STARTING MALWARE SCAN----\n")

        if not os.path.exists(args.filepath):
            print("Directory " + args.filepath + " does not exist!", file=sys.stderr)
            return

        stopwatch.start()
        if os.path.isdir(args.filepath):
            results = malware_scanner.scan_directory(args.filepath)
        else:
            results = [args.filepath] if malware_scanner.scan_file(args.filepath) else []

        print("\n----COMPLETED MALWARE SCAN----\n")
        stopwatch.stop()

        if not results:
            print("No malware found :)")
            return

        api_key = os.getenv(config.MALWARE_BAZAAR_API_KEY_ENVIRONMENT_VARIABLE)

        print("FOUND " + str(len(results)) + " MALWARE FILES!")
        if api_key:
            malware_analyzer = MalwareAnalyzer(api_key)
            analysis = malware_analyzer.analyze(results)
            pprint(analysis)
        else:
            for malware in results:
                print(malware)

        print(f"\nTime elapsed: {stopwatch.elapsed_time(): .2f} ")
    else:
        if not os.path.isfile(config.KEY_PATH):
            key = Fernet.generate_key()
            with open(config.KEY_PATH, 'wb') as f:
                f.write(key)
        with open(config.KEY_PATH, 'r') as f:
            key = f.read()

        file_prison = FilePrison(key)
        if args.action == action.WATCH:
            logger = Logger() if args.verbose else VoidLogger()
            file_prison.destination = args.quarantine
            database = DatabaseReader.read_database(config.MALWARE_DB_FILE)
            malware_scanner = MalwareScanner(database, logger=logger)
            malware_watcher = MalwareWatcher(malware_scanner, file_prison)

            print(f'Watching {os.path.abspath(args.filepath)}')
            malware_watcher.watch(args.filepath)
        elif args.action == action.UNLOCK:
            file_prison.unlock_file(args.filepath)
        elif args.action == action.LOCK:
            file_prison.lock_file(args.filepath)


if __name__ == "__main__":
    main()
